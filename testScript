{
    "script": "# Ensure that the script is run with administrative privileges\nif (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {\n    Write-Host \"You need to run this script as an Administrator!\"\n    exit\n}\n\n# Check if AppLocker is supported on the current machine\n$osVersion = [System.Environment]::OSVersion.Version\nif ($osVersion.Major -lt 6 -or ($osVersion.Major -eq 6 -and $osVersion.Minor -lt 1)) {\n    Write-Host \"AppLocker is only available on Windows 7 and later versions.\"\n    exit\n}\n\n# Enable the AppLocker service (Application Identity Service)\nWrite-Host \"Enabling Application Identity Service...\"\nSet-Service -Name AppIDSvc -StartupType Automatic\nStart-Service -Name AppIDSvc\n\n# Create default rules for AppLocker\nWrite-Host \"Creating default AppLocker rules...\"\n# Import the AppLocker PowerShell module if needed\nif (-not (Get-Module -ListAvailable -Name AppLocker)) {\n    Import-Module AppLocker\n}\n\n# Create default rules for executable files, Windows Installer files, and scripts\nNew-AppLockerPolicy -Default -RuleType All -FilePath C:\\AppLockerDefault.xml\n\n# Apply the default rules\nSet-AppLockerPolicy -XMLPolicy C:\\AppLockerDefault.xml -Merge\n\n# Clean up the temporary XML file\nRemove-Item -Path C:\\AppLockerDefault.xml\n\n# Check if AppLocker rules were successfully applied\n$appliedRules = Get-AppLockerPolicy -Effective\nif ($appliedRules) {\n    Write-Host \"AppLocker policy successfully applied.\"\n} else {\n    Write-Host \"Failed to apply AppLocker policy.\"\n}\n\n# Enable enforcement of AppLocker rules\nWrite-Host \"Enforcing AppLocker rules...\"\n# Set policies for enforcing AppLocker rules\n$policy = Get-AppLockerPolicy -Effective\n$policy.PolicyType = 'Enforced'\nSet-AppLockerPolicy -PolicyObject $policy -Merge\n\nWrite-Host \"\\nApplication Whitelisting with AppLocker has been enabled\""
}
