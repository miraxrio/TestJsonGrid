[{"id":225,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"f850eb5e-084a-5335-8a5c-a1c84db904ad","name":"Unused assignments","service":"SonarCloud","phase":"r","description":"Unused assignments should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\r\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\r\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\r\nof computing resources.\r\n\r\n### Exceptions\r\n\r\nThe rule ignores\r\n\r\n* Initializations to `-1`, `0`, `1`, `undefined`, `[]`, `{}`,\r\n  `true`, `false` and `\"\"`.\r\n* Variables that start with an underscore (e.g. `_unused`) are ignored.\r\n* Assignment of `null` is ignored because it is sometimes used to help garbage collection\r\n* Increment and decrement expressions are ignored because they are often used idiomatically instead of `x+1`\r\n* This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object)\r\n\r\n```\r\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\r\ndoSomething(rest);\r\n\r\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\r\ndoSomething(x2, x3);\r\n```\r\n\r\n## How to fix it\r\n\r\nRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\r\nmethod that writes certain data to a file and returns the number of written bytes).\r\n\r\n### Code examples\r\n\r\n#### Noncompliant code example\r\n\r\n```\r\nfunction foo(y) {\r\n  let x = 100; // Noncompliant: dead store\r\n  x = 150;     // Noncompliant: dead store\r\n  x = 200;\r\n  return x + y;\r\n}\r\n```\r\n\r\n#### Compliant solution\r\n\r\n```\r\nfunction foo(y) {\r\n  let x = 200; // Compliant: no unnecessary assignment\r\n  return x + y;\r\n}\r\n```\r\n\r\n## Resources\r\n\r\n### Standards\r\n\r\n* CWE - [CWE-563 - Assignment to Variable without Use ('Unused Variable')](https://cwe.mitre.org/data/definitions/563)\r\n\r\n### Related rules\r\n\r\n* [S1763](/organizations/jay-osho/rules?open=javascript%3AS1763\\&rule_key=javascript%3AS1763) - All code should be reachable\r\n* [S2589](/organizations/jay-osho/rules?open=javascript%3AS2589\\&rule_key=javascript%3AS2589) - Boolean expressions should not be gratuitous\r\n* [S3516](/organizations/jay-osho/rules?open=javascript%3AS3516\\&rule_key=javascript%3AS3516) - Function returns should not be invariant\r\n* [S3626](/organizations/jay-osho/rules?open=javascript%3AS3626\\&rule_key=javascript%3AS3626) - Jump statements should not be redundant","component":"SonarCloud","image":"-","remediation":"Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\r\nmethod that writes certain data to a file and returns the number of written bytes).\r\n\r\n#### Noncompliant code example\r\n\r\n```\r\nfunction foo(y) {\r\n  let x = 100; // Noncompliant: dead store\r\n  x = 150;     // Noncompliant: dead store\r\n  x = 200;\r\n  return x + y;\r\n}\r\n```\r\n\r\n#### Compliant solution\r\n\r\n```\r\nfunction foo(y) {\r\n  let x = 200; // Compliant: no unnecessary assignment\r\n  return x + y;\r\n}\r\n```","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":222,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"4d318d94-9d78-5c21-a90e-79c9f2ea7827","name":"Redundant React fragments","service":"SonarCloud","phase":"r","description":"Redundant React fragments should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nReact fragments are a feature in React that allows you to group multiple elements together without adding an extra DOM element. They are a way to\r\nreturn multiple elements from a component’s render method without requiring a wrapping parent element.\r\n\r\nHowever, a fragment is redundant if it contains only one child, or if it is the child of an HTML element.\r\n\r\n```\r\n<><Foo /></>;    // Noncompliant: The fragment has only one child\r\n<p><>foo</></p>; // Noncompliant: The fragment is the child of the HTML element 'p'\r\n```\r\n\r\nYou can safely remove the redundant fragment while preserving the original behaviour.\r\n\r\n```\r\n<Foo />;\r\n<p>foo</p>;\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* React Documentation - [Fragments](https://react.dev/reference/react/Fragment)","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":221,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"ef59d6f4-96c0-5c96-bdb4-8358d5fe2c2e","name":"Redundant React Fragments","service":"SonarCloud","phase":"r","description":"Redundant React fragments should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nReact fragments are a feature in React that allows you to group multiple elements together without adding an extra DOM element. They are a way to\r\nreturn multiple elements from a component’s render method without requiring a wrapping parent element.\r\n\r\nHowever, a fragment is redundant if it contains only one child, or if it is the child of an HTML element.\r\n\r\n```\r\n<><Foo /></>;    // Noncompliant: The fragment has only one child\r\n<p><>foo</></p>; // Noncompliant: The fragment is the child of the HTML element 'p'\r\n```\r\n\r\nYou can safely remove the redundant fragment while preserving the original behaviour.\r\n\r\n```\r\n<Foo />;\r\n<p>foo</p>;\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* React Documentation - [Fragments](https://react.dev/reference/react/Fragment)","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":228,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"266f8a2b-e97e-53d0-bdc7-949ab492002d","name":"Writable React Prompts","service":"SonarCloud","phase":"r","description":"React props should be read-only","severity":"Critical","details":"## Why is this an issue?\r\n\r\nReact props should be read-only because it helps to enforce the principle of immutability in React functional components. By making props\r\nread-only, you ensure that the data passed from a parent component to a child component cannot be modified directly by the child component. This helps\r\nmaintain a clear data flow and prevents unexpected side effects.\r\n\r\nIf props were mutable, child components could modify the props directly, leading to unpredictable behavior and making it harder to track down bugs.\r\nBy enforcing read-only props, React promotes a more predictable and maintainable codebase. Additionally, read-only props enable performance\r\noptimizations in React’s rendering process by avoiding unnecessary re-renders of components.\r\n\r\nOverall, enforcing read-only props in React helps improve code reliability, maintainability, and performance.\r\n\r\n```\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nfunction Welcome(props: Props) { // Noncompliant: The component props are not read-only\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\nYou should use TypeScript’s utility type `Readonly` to make your functional component props read-only.\r\n\r\n```\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nfunction Welcome(props: Readonly<Props>) {\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\nAlternatively, you can use TypeScript’s modifier `readonly` to mark all the props of your functional component individually as\r\nread-only.\r\n\r\n```\r\ninterface Props {\r\n  readonly name: string;\r\n}\r\n\r\nfunction Welcome(props: Props) {\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* React Documentation - [Passing Props to a Component](https://react.dev/learn/passing-props-to-a-component)\r\n* TypeScript Documentation - [Readonly\\<Type>](https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlytype)\r\n* TypeScript Documentation - [readonly](https://www.typescriptlang.org/docs/handbook/2/classes.html#readonly)","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":227,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"5ac688e1-040d-56be-b577-611c664c2734","name":"Writable React Prompts","service":"SonarCloud","phase":"r","description":"React props should be read-only","severity":"Critical","details":"## Why is this an issue?\r\n\r\nReact props should be read-only because it helps to enforce the principle of immutability in React functional components. By making props\r\nread-only, you ensure that the data passed from a parent component to a child component cannot be modified directly by the child component. This helps\r\nmaintain a clear data flow and prevents unexpected side effects.\r\n\r\nIf props were mutable, child components could modify the props directly, leading to unpredictable behavior and making it harder to track down bugs.\r\nBy enforcing read-only props, React promotes a more predictable and maintainable codebase. Additionally, read-only props enable performance\r\noptimizations in React’s rendering process by avoiding unnecessary re-renders of components.\r\n\r\nOverall, enforcing read-only props in React helps improve code reliability, maintainability, and performance.\r\n\r\n```\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nfunction Welcome(props: Props) { // Noncompliant: The component props are not read-only\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\nYou should use TypeScript’s utility type `Readonly` to make your functional component props read-only.\r\n\r\n```\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nfunction Welcome(props: Readonly<Props>) {\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\nAlternatively, you can use TypeScript’s modifier `readonly` to mark all the props of your functional component individually as\r\nread-only.\r\n\r\n```\r\ninterface Props {\r\n  readonly name: string;\r\n}\r\n\r\nfunction Welcome(props: Props) {\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* React Documentation - [Passing Props to a Component](https://react.dev/learn/passing-props-to-a-component)\r\n* TypeScript Documentation - [Readonly\\<Type>](https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlytype)\r\n* TypeScript Documentation - [readonly](https://www.typescriptlang.org/docs/handbook/2/classes.html#readonly)","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":226,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"48cee6df-d910-5d20-a684-5c87eae88c1e","name":"Unnecessary imports","service":"SonarCloud","phase":"r","description":"Unnecessary imports should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\r\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\r\nmaintainability issues.\r\n\r\n```\r\nimport A from 'a'; // Noncompliant: The imported symbol 'A' isn't used\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\nTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\r\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\r\nmore optimized bundle size.\r\n\r\n```\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* MDN web docs - [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\r\n\r\n### Related rules\r\n\r\n* [S1481](/organizations/jay-osho/rules?open=javascript%3AS1481\\&rule_key=javascript%3AS1481) - Unused local variables and functions should be removed","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":229,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"c7aebe7f-9746-57c9-b565-957c7ef7ce54","name":"Unnecessary imports","service":"SonarCloud","phase":"r","description":"Unnecessary imports should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\r\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\r\nmaintainability issues.\r\n\r\n```\r\nimport A from 'a'; // Noncompliant: The imported symbol 'A' isn't used\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\nTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\r\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\r\nmore optimized bundle size.\r\n\r\n```\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* MDN web docs - [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\r\n\r\n### Related rules\r\n\r\n* [S1481](/organizations/jay-osho/rules?open=javascript%3AS1481\\&rule_key=javascript%3AS1481) - Unused local variables and functions should be removed","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":233,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"35bc7f92-5ab0-5c9f-9b18-f074fdb26c21","name":"Writable React Prompts","service":"SonarCloud","phase":"r","description":"React props should be read-only","severity":"Critical","details":"## Why is this an issue?\r\n\r\nReact props should be read-only because it helps to enforce the principle of immutability in React functional components. By making props\r\nread-only, you ensure that the data passed from a parent component to a child component cannot be modified directly by the child component. This helps\r\nmaintain a clear data flow and prevents unexpected side effects.\r\n\r\nIf props were mutable, child components could modify the props directly, leading to unpredictable behavior and making it harder to track down bugs.\r\nBy enforcing read-only props, React promotes a more predictable and maintainable codebase. Additionally, read-only props enable performance\r\noptimizations in React’s rendering process by avoiding unnecessary re-renders of components.\r\n\r\nOverall, enforcing read-only props in React helps improve code reliability, maintainability, and performance.\r\n\r\n```\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nfunction Welcome(props: Props) { // Noncompliant: The component props are not read-only\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\nYou should use TypeScript’s utility type `Readonly` to make your functional component props read-only.\r\n\r\n```\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nfunction Welcome(props: Readonly<Props>) {\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\nAlternatively, you can use TypeScript’s modifier `readonly` to mark all the props of your functional component individually as\r\nread-only.\r\n\r\n```\r\ninterface Props {\r\n  readonly name: string;\r\n}\r\n\r\nfunction Welcome(props: Props) {\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* React Documentation - [Passing Props to a Component](https://react.dev/learn/passing-props-to-a-component)\r\n* TypeScript Documentation - [Readonly\\<Type>](https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlytype)\r\n* TypeScript Documentation - [readonly](https://www.typescriptlang.org/docs/handbook/2/classes.html#readonly)","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":231,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"58e4d0b9-f401-5e2e-8592-83a78c1b35ec","name":"Unnecessary imports","service":"SonarCloud","phase":"r","description":"Unnecessary imports should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\r\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\r\nmaintainability issues.\r\n\r\n```\r\nimport A from 'a'; // Noncompliant: The imported symbol 'A' isn't used\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\nTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\r\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\r\nmore optimized bundle size.\r\n\r\n```\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* MDN web docs - [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\r\n\r\n### Related rules\r\n\r\n* [S1481](/organizations/jay-osho/rules?open=javascript%3AS1481\\&rule_key=javascript%3AS1481) - Unused local variables and functions should be removed","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":235,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"90c4c5c9-c1d6-50dd-ab08-71c2a46505a1","name":"Redundant React Fragments","service":"SonarCloud","phase":"r","description":"Redundant React fragments should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nReact fragments are a feature in React that allows you to group multiple elements together without adding an extra DOM element. They are a way to\r\nreturn multiple elements from a component’s render method without requiring a wrapping parent element.\r\n\r\nHowever, a fragment is redundant if it contains only one child, or if it is the child of an HTML element.\r\n\r\n```\r\n<><Foo /></>;    // Noncompliant: The fragment has only one child\r\n<p><>foo</></p>; // Noncompliant: The fragment is the child of the HTML element 'p'\r\n```\r\n\r\nYou can safely remove the redundant fragment while preserving the original behaviour.\r\n\r\n```\r\n<Foo />;\r\n<p>foo</p>;\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* React Documentation - [Fragments](https://react.dev/reference/react/Fragment)","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":234,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"4c4b705c-e46f-5d0f-acc2-70a49853e9ed","name":"Unused Assignments","service":"SonarCloud","phase":"r","description":"Unused assignments should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\r\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\r\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\r\nof computing resources.\r\n\r\n### Exceptions\r\n\r\nThe rule ignores\r\n\r\n* Initializations to `-1`, `0`, `1`, `undefined`, `[]`, `{}`,\r\n  `true`, `false` and `\"\"`.\r\n* Variables that start with an underscore (e.g. `_unused`) are ignored.\r\n* Assignment of `null` is ignored because it is sometimes used to help garbage collection\r\n* Increment and decrement expressions are ignored because they are often used idiomatically instead of `x+1`\r\n* This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object)\r\n\r\n```\r\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\r\ndoSomething(rest);\r\n\r\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\r\ndoSomething(x2, x3);\r\n```\r\n\r\n## How to fix it\r\n\r\nRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\r\nmethod that writes certain data to a file and returns the number of written bytes).\r\n\r\n### Code examples\r\n\r\n#### Noncompliant code example\r\n\r\n```\r\nfunction foo(y) {\r\n  let x = 100; // Noncompliant: dead store\r\n  x = 150;     // Noncompliant: dead store\r\n  x = 200;\r\n  return x + y;\r\n}\r\n```\r\n\r\n#### Compliant solution\r\n\r\n```\r\nfunction foo(y) {\r\n  let x = 200; // Compliant: no unnecessary assignment\r\n  return x + y;\r\n}\r\n```\r\n\r\n## Resources\r\n\r\n### Standards\r\n\r\n* CWE - [CWE-563 - Assignment to Variable without Use ('Unused Variable')](https://cwe.mitre.org/data/definitions/563)\r\n\r\n### Related rules\r\n\r\n* [S1763](/organizations/jay-osho/rules?open=javascript%3AS1763\\&rule_key=javascript%3AS1763) - All code should be reachable\r\n* [S2589](/organizations/jay-osho/rules?open=javascript%3AS2589\\&rule_key=javascript%3AS2589) - Boolean expressions should not be gratuitous\r\n* [S3516](/organizations/jay-osho/rules?open=javascript%3AS3516\\&rule_key=javascript%3AS3516) - Function returns should not be invariant\r\n* [S3626](/organizations/jay-osho/rules?open=javascript%3AS3626\\&rule_key=javascript%3AS3626) - Jump statements should not be redundant","component":"SonarCloud","image":"-","remediation":"Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\r\nmethod that writes certain data to a file and returns the number of written bytes).\r\n\r\n#### Noncompliant code example\r\n\r\n```\r\nfunction foo(y) {\r\n  let x = 100; // Noncompliant: dead store\r\n  x = 150;     // Noncompliant: dead store\r\n  x = 200;\r\n  return x + y;\r\n}\r\n```\r\n\r\n#### Compliant solution\r\n\r\n```\r\nfunction foo(y) {\r\n  let x = 200; // Compliant: no unnecessary assignment\r\n  return x + y;\r\n}\r\n```","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":236,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"ebfedee0-2a56-518a-bf67-0e12dd1cf89a","name":"Unnecessary imports","service":"SonarCloud","phase":"r","description":"Unnecessary imports should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\r\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\r\nmaintainability issues.\r\n\r\n```\r\nimport A from 'a'; // Noncompliant: The imported symbol 'A' isn't used\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\nTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\r\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\r\nmore optimized bundle size.\r\n\r\n```\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* MDN web docs - [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\r\n\r\n### Related rules\r\n\r\n* [S1481](/organizations/jay-osho/rules?open=javascript%3AS1481\\&rule_key=javascript%3AS1481) - Unused local variables and functions should be removed","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":232,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"4b679db9-1799-5961-88f9-9ea518a371f4","name":"Unnecessary imports","service":"SonarCloud","phase":"r","description":"Unnecessary imports should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\r\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\r\nmaintainability issues.\r\n\r\n```\r\nimport A from 'a'; // Noncompliant: The imported symbol 'A' isn't used\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\nTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\r\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\r\nmore optimized bundle size.\r\n\r\n```\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* MDN web docs - [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\r\n\r\n### Related rules\r\n\r\n* [S1481](/organizations/jay-osho/rules?open=javascript%3AS1481\\&rule_key=javascript%3AS1481) - Unused local variables and functions should be removed","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":224,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"95ca1d5e-989d-5279-b695-06329c14a684","name":"Writable React Prompts","service":"SonarCloud","phase":"r","description":"React props should be read-only","severity":"Critical","details":"## Why is this an issue?\r\n\r\nReact props should be read-only because it helps to enforce the principle of immutability in React functional components. By making props\r\nread-only, you ensure that the data passed from a parent component to a child component cannot be modified directly by the child component. This helps\r\nmaintain a clear data flow and prevents unexpected side effects.\r\n\r\nIf props were mutable, child components could modify the props directly, leading to unpredictable behavior and making it harder to track down bugs.\r\nBy enforcing read-only props, React promotes a more predictable and maintainable codebase. Additionally, read-only props enable performance\r\noptimizations in React’s rendering process by avoiding unnecessary re-renders of components.\r\n\r\nOverall, enforcing read-only props in React helps improve code reliability, maintainability, and performance.\r\n\r\n```\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nfunction Welcome(props: Props) { // Noncompliant: The component props are not read-only\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\nYou should use TypeScript’s utility type `Readonly` to make your functional component props read-only.\r\n\r\n```\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nfunction Welcome(props: Readonly<Props>) {\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\nAlternatively, you can use TypeScript’s modifier `readonly` to mark all the props of your functional component individually as\r\nread-only.\r\n\r\n```\r\ninterface Props {\r\n  readonly name: string;\r\n}\r\n\r\nfunction Welcome(props: Props) {\r\n  return <div>Hello {props.name}</div>;\r\n}\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* React Documentation - [Passing Props to a Component](https://react.dev/learn/passing-props-to-a-component)\r\n* TypeScript Documentation - [Readonly\\<Type>](https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlytype)\r\n* TypeScript Documentation - [readonly](https://www.typescriptlang.org/docs/handbook/2/classes.html#readonly)","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":230,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"6473b92c-8b50-5d29-8c15-64e8edd98c44","name":"Unnecessary imports should be removed","service":"SonarCloud","phase":"r","description":"Unnecessary imports should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\r\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\r\nmaintainability issues.\r\n\r\n```\r\nimport A from 'a'; // Noncompliant: The imported symbol 'A' isn't used\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\nTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\r\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\r\nmore optimized bundle size.\r\n\r\n```\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* MDN web docs - [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\r\n\r\n### Related rules\r\n\r\n* [S1481](/organizations/jay-osho/rules?open=javascript%3AS1481\\&rule_key=javascript%3AS1481) - Unused local variables and functions should be removed","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":223,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"33d2d252-fdee-51e1-8d5d-1067b86f00a8","name":"Unnecessary imports","service":"SonarCloud","phase":"r","description":"Unnecessary imports should be removed","severity":"Critical","details":"## Why is this an issue?\r\n\r\nUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\r\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\r\nmaintainability issues.\r\n\r\n```\r\nimport A from 'a'; // Noncompliant: The imported symbol 'A' isn't used\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\nTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\r\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\r\nmore optimized bundle size.\r\n\r\n```\r\nimport { B1 } from 'b';\r\n\r\nconsole.log(B1);\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* MDN web docs - [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\r\n\r\n### Related rules\r\n\r\n* [S1481](/organizations/jay-osho/rules?open=javascript%3AS1481\\&rule_key=javascript%3AS1481) - Unused local variables and functions should be removed","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":237,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"e6592c41-6fd9-50a5-9fc1-600a7aaf7bb4","name":"Untitled iFrame","service":"SonarCloud","phase":"r","description":"iFrames must have a title","severity":"Critical","details":"## Why is this an issue?\r\n\r\nAn iframe, or inline frame, is an HTML document embedded inside another HTML document on a website. The iframe HTML element is often used to insert\r\ncontent from another source, such as an advertisement, into a web page.\r\n\r\nIn the context of web accessibility, `<iframe>`'s should have a `title` attribute. This is because screen readers for\r\nthe visually impaired use this title to help users understand the content of the iframe.\r\n\r\nWithout a title, it can be difficult for these users to understand the context or purpose of the iframe’s content.\r\n\r\n## How to fix it\r\n\r\nTo fix missing iframe titles, you simply need to add a `title` attribute to your `<iframe>` element. The value of this\r\nattribute should be a brief description of the iframe’s content.\r\n\r\n### Code examples\r\n\r\n#### Noncompliant code example\r\n\r\n```\r\nfunction iframe() {\r\n    return (\r\n        <iframe src=\"https://openweathermap.org\"></iframe> // Noncompliant\r\n    );\r\n}\r\n```\r\n\r\n#### Compliant solution\r\n\r\n```\r\nfunction iframe() {\r\n    return (\r\n        <iframe src=\"https://openweathermap.org\" title=\"Weather forecasts, nowcasts and history\"></iframe>\r\n    );\r\n}\r\n```\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n* MDN web docs - [iframe element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)\r\n* WCAG - [Bypass Blocks](https://www.w3.org/WAI/WCAG21/Understanding/bypass-blocks)\r\n* WCAG - [Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)","component":"SonarCloud","image":"-","remediation":"To fix missing iframe titles, you simply need to add a `title` attribute to your `<iframe>` element. The value of this\r\nattribute should be a brief description of the iframe’s content.\r\n\r\n#### Noncompliant code example\r\n\r\n```\r\nfunction iframe() {\r\n    return (\r\n        <iframe src=\"https://openweathermap.org\"></iframe> // Noncompliant\r\n    );\r\n}\r\n```\r\n\r\n#### Compliant solution\r\n\r\n```\r\nfunction iframe() {\r\n    return (\r\n        <iframe src=\"https://openweathermap.org\" title=\"Weather forecasts, nowcasts and history\"></iframe>\r\n    );\r\n}\r\n```","type":"sonarcloud","enable":false,"keyphrase":[3]},{"id":220,"card_id":"6e6031ca-fdb5-41b3-9371-c808e861d2d8","find_id":"26c2a300-fe59-5c5c-bf92-6893bb4cb189","name":"Track uses of \"TODO\" tags","service":"SonarCloud","phase":"r","description":"Track uses of \"TODO\" tags","severity":"Low","details":"## Why is this an issue?\r\n\r\nDevelopers often use `TODO` tags to mark areas in the code where additional work or improvements are needed but are not implemented\r\nimmediately. However, these `TODO` tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This rule aims to\r\nidentify and address unattended `TODO` tags to ensure a clean and maintainable codebase. This description explores why this is a problem\r\nand how it can be fixed to improve the overall code quality.\r\n\r\n### What is the potential impact?\r\n\r\nUnattended `TODO` tags in code can have significant implications for the development process and the overall codebase.\r\n\r\nIncomplete Functionality: When developers leave `TODO` tags without implementing the corresponding code, it results in incomplete\r\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\r\n\r\nMissed Bug Fixes: If developers do not promptly address `TODO` tags, they might overlook critical bug fixes and security updates.\r\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\r\n\r\nImpact on Collaboration: In team-based development environments, unattended `TODO` tags can hinder collaboration. Other team members\r\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\r\n\r\nCodebase Bloat: The accumulation of unattended `TODO` tags over time can clutter the codebase and make it difficult to distinguish\r\nbetween work in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\r\n\r\nAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\r\ndevelopers.\r\n\r\n### Noncompliant code example\r\n\r\n```\r\nfunction doSomething() {\r\n  // TODO\r\n}\r\n```\r\n\r\n## Resources\r\n\r\n* CWE - [CWE-546 - Suspicious Comment](https://cwe.mitre.org/data/definitions/546)","component":"SonarCloud","image":"-","remediation":"Empty","type":"sonarcloud","enable":false,"keyphrase":[3]}]
