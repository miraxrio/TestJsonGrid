{
    "webScripts": [
        {
            "Level": "0",
            "CardId": "sb101",
            "WebScript": "# Ensure that the script is run with administrative privileges\nif (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {\nWrite-Host You need to run this script as an Administrator!\nexit\n}\n# Check if AppLocker is supported on the current machine\nosVersion = [System.Environment]::OSVersion.Version\nif (osVersion.Major -lt 6 -or (osVersion.Major -eq 6 -and osVersion.Minor -lt 1)) {\nWrite-Host AppLocker is only available on Windows 7 and later versions.\nexit\n}\n# Enable the AppLocker service (Application Identity Service)\nWrite-Host Enabling Application Identity Service...\nSet-Service -Name AppIDSvc -StartupType Automatic\nStart-Service -Name AppIDSvc\n# Create default rules for AppLocker\nWrite-Host Creating default AppLocker rules...\n# Import the AppLocker PowerShell module if needed\nif (-not (Get-Module -ListAvailable -Name AppLocker)) {\nImport-Module AppLocker\n}\n# Create default rules for executable files, Windows Installer files, and scripts\nNew-AppLockerPolicy -Default -RuleType All -FilePath C:\AppLockerDefault.xml\n# Apply the default rules\nSet-AppLockerPolicy -XMLPolicy C:\AppLockerDefault.xml -Merge\n# Clean up the temporary XML file\nRemove-Item -Path C:\AppLockerDefault.xml\n# Check if AppLocker rules were successfully applied\n\nappliedRules = Get-AppLockerPolicy -Effective\nif (appliedRules) {\nWrite-Host AppLocker policy successfully applied.\n} else {\nWrite-Host Failed to apply AppLocker policy.\n}\n# Enable enforcement of AppLocker rules\nWrite-Host Enforcing AppLocker rules...\n# Set policies for enforcing AppLocker rules\npolicy = Get-AppLockerPolicy -Effective\npolicy.PolicyType = 'Enforced'\nSet-AppLockerPolicy -PolicyObject policy -Merge\nWrite-Host\nApplication Whitelisting with AppLocker has been enabled"
        },
        {
            "Level": "0",
            "CardId": "sb102",
            "WebScript": "Install-Module Microsoft.Graph.Intune\nConnect-MgGraph -Scopes DeviceManagementConfiguration.ReadWrite.All\nEnsure that Microsoft Graph is installed and imported\nInstall-Module Microsoft.Graph.Intune -Force -AllowClobber\nImport-Module Microsoft.Graph.Intune\n# Connect to Microsoft Graph if not already connected\nif (-not (Get-MgContext)) {\nConnect-MgGraph -Scopes DeviceManagementConfiguration.ReadWrite.All\n}\n Define the password policy parameters\nminLength = 8\nrequireSpecialChar = true\nrequireNumber = true\nGet the existing password profile policy\npolicies = Get-MgDeviceManagementDeviceCompliancePolicy | Where-Object { passwordRequired -eq true }\nIf no password policy exists, create one\nif (policies.Count -eq 0) {\n    Write-Host No existing password policy found. Creating a new password policy...\n# Create a new password policy\nNew-MgDeviceManagementDeviceCompliancePolicy -PasswordRequired true -PasswordMinimumLength minLength\n-PasswordRequiredType alphanumeric -PasswordExpirationDays 0 -PasswordPreviousPasswordBlockCount 0 -DeviceThreatProtectionRequiredSecurityLevel unavailable}\nelse {# Update the existing password policy with the required settings\nforeach (policy in policies) {Write-Host Updating existing password policy: (policy.DisplayName)\nUpdate-MgDeviceManagementDeviceCompliancePolicy -DeviceCompliancePolicyId policy.Id -PasswordMinimumLength minLength\n-PasswordRequired true -PasswordRequiredType alphanumeric -PasswordMinimumCharacterSetCount 2\n}}\nWrite-Host Password policy updated successfully with the following requirements:\nWrite-Host  - Minimum Length: minLength\nWrite-Host  - Special Character Required: requireSpecialChar\nWrite-Host  - Number Required: requireNumber"
        },
        {
            "Level": "0",
            "CardId": "sb103",
            "WebScript": "# Initialize boto3 clients\nsecurityhub = boto3.client('securityhub')\ns3 = boto3.client('s3')\n\ndef get_findings(product_arn, severity_label=\"MEDIUM\"):\n    \"\"\"Get Security Hub findings for a specific product with the given severity.\"\"\"\n    response = securityhub.get_findings(\n        Filters={\n            'ProductArn': [{'Value': product_arn, 'Comparison': 'EQUALS'}],\n            'SeverityLabel': [{'Value': severity_label, 'Comparison': 'EQUALS'}],\n            'ComplianceStatus': [{'Value': 'FAILED', 'Comparison': 'EQUALS'}]\n        }\n    )\n    return response['Findings']\n\ndef remediate_s3_bucket(bucket_name):\n    \"\"\"Enable default encryption on the S3 bucket.\"\"\"\n    try:\n        s3.put_bucket_encryption(\n            Bucket=bucket_name,\n            ServerSideEncryptionConfiguration={\n                'Rules': [\n                    {\n                        'ApplyServerSideEncryptionByDefault': {\n                            'SSEAlgorithm': 'AES256'\n                        }\n                    }\n                ]\n            }\n        )\n        print(f\"Encryption enabled for bucket: {bucket_name}\")\n    except Exception as e:\n        print(f\"Failed to remediate bucket {bucket_name}: {str(e)}\")\n\ndef main():\n    # Security Hub product ARN (you can find it in the Security Hub console)\n    product_arn = 'arn:aws:securityhub:us-east-1::product/aws/securityhub'\n    \n    # Get the findings for S3 bucket encryption\n    findings = get_findings(product_arn, severity_label=\"MEDIUM\")\n    \n    for finding in findings:\n        for resource in finding['Resources']:\n            if resource['Type'] == 'AwsS3Bucket':\n                bucket_name = resource['Id'].split(':')[-1]\n                print(f\"Remediating bucket: {bucket_name}\")\n                remediate_s3_bucket(bucket_name)\n\nif __name__ == \"__main__\":\n    main()"
        },
        {
            "Level": "0",
            "CardId": "sb104",
            "WebScript": "# Install the necessary modules if not already installed\nInstall-Module -Name MSOnline -Force -AllowClobber\nInstall-Module -Name AzureAD -Force -AllowClobber\n# Import the modules\nImport-Module MSOnline\nImport-Module AzureAD\n# Connect to MSOnline\nmsolCred = Get-Credential\nConnect-MsolService -Credential msolCred\n# Connect to Azure AD\nConnect-AzureAD -Credential msolCred\n# Get all users from Azure AD\nusers = Get-MsolUser -All\n# Enable MFA for each user\nforeach (user in users) {\n userPrincipalName = user.UserPrincipalName\n# Check if MFA is already enabled for the user\nmfaStatus = Get-MsolUser -UserPrincipalName userPrincipalName | Select-Object -ExpandProperty StrongAuthenticationRequirements\nif (mfaStatus -eq null) {\n# MFA is not enabled, enable it\nWrite-Host Enabling MFA for userPrincipalName\nSet-MsolUser -UserPrincipalName userPrincipalName -StrongAuthenticationRequirements @(@{RelyingParty; State=Enabled)\n} else {\nWrite-Host MFA is already enabled for userPrincipalName\n}\n}\nWrite-Host MFA has been enabled for applicable users."
        }
    ]
}
